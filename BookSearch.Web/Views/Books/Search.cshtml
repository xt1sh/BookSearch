@model SearchResult
@{
    ViewData["Title"] = "Search Books";
}

<h2>Search Books</h2>

<div class="row">
    @if (Model != null)
    {
        <!-- Facets Section on the Left -->
        <div class="col-md-3">
            <div class="facet-section">
                <h5>Active Categories</h5>
                @if (Model.Categories != null && Model.Categories.Any())
                {
                    <ul class="list-group mb-3">
                        @foreach (var category in Model.Categories)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @category
                                <a href="/Books/Search?query=@Model.Query&category=@string.Join(',', Model.Categories.Where(c => c != category))" class="btn btn-sm btn-danger">
                                    &times;
                                </a>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>No active categories.</p>
                }

                <h5>Filter by Category</h5>
                <ul class="list-group">
                    @if (Model.Facets != null && Model.Facets.Any())
                    {
                        foreach (var facet in Model.Facets.Where(f => !Model.Categories.Contains(f.Value)))
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <a href="/Books/Search?query=@Model.Query&category=@string.Join(',', Model.Categories.Concat(new[] { facet.Value }))" class="text-decoration-none">@facet.Value</a>
                                <span class="badge bg-secondary">@facet.Count</span>
                            </li>
                        }
                    }
                    else
                    {
                        <p>No categories available.</p>
                    }
                </ul>
            </div>
        </div>
    }

    <!-- Main Content Section on the Right -->
    <div class="col-md-9">
        <div style="position: relative;">
            <input type="text" id="searchBox" class="form-control" placeholder="Start typing to search..." autocomplete="off" />
            <ul id="autocompleteDropdown" class="dropdown-menu" style="position: absolute; display: none; z-index: 1000;"></ul>
        </div>
        <button id="searchButton" class="btn btn-primary mt-2">Search</button>

        <div id="results" class="mt-4">
            @if (Model != null)
            {
                @if (Model.Books != null && Model.Books.Count > 0)
                {
                    <ul class="list-group">
                        @foreach (var book in Model.Books)
                        {
                            <li class="list-group-item d-flex align-items-start">
                                <img src="@book.CoverImage" alt="@book.Title Cover" class="me-3" style="width: 100px; height: auto; object-fit: cover; border-radius: 5px;" />
                                <div>
                                    <strong>@book.Title</strong> by @string.Join(',', book.Authors) <br />
                                    <em>@book.Description</em> <br />
                                    <span class="badge bg-secondary">@string.Join(',', book.Categories)</span>
                                    <span class="badge bg-info">@book.Year</span>
                                    <div class="mt-2">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= book.Rating)
                                            {
                                                <i class="fas fa-star text-warning"></i>
                                            }
                                            else
                                            {
                                                <i class="far fa-star text-muted"></i>
                                            }
                                        }
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>

                    <nav class="mt-4">
                        <ul class="pagination">
                            @if (Model.HasPreviousPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="/Books/Search?query=@(Model.Query)&page=@(Model.CurrentPage - 1)">Previous</a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">Previous</span>
                                </li>
                            }

                            <!-- First Page -->
                            @if (Model.CurrentPage > 3)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="/Books/Search?query=@(Model.Query)&page=1">1</a>
                                </li>
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                            }

                            <!-- Nearby Pages -->
                            @for (int i = Math.Max(0, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages - 1, Model.CurrentPage + 2); i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="/Books/Search?query=@(Model.Query)&page=@i">@(i + 1)</a>
                                </li>
                            }

                            <!-- Last Page -->
                            @if (Model.CurrentPage < Model.TotalPages - 2)
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">...</span>
                                </li>
                                <li class="page-item">
                                    <a class="page-link" href="/Books/Search?query=@(Model.Query)&page=@Model.TotalPages">@Model.TotalPages</a>
                                </li>
                            }

                            @if (Model.HasNextPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="/Books/Search?query=@(Model.Query)&page=@(Model.CurrentPage + 1)">Next</a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">Next</span>
                                </li>
                            }
                        </ul>
                    </nav>
                }
                else
                {
                    <p>No results found.</p>
                }
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            let $searchBox = $('#searchBox');
            let $autocompleteDropdown = $('#autocompleteDropdown');
            let $searchButton = $('#searchButton');

            // Autocomplete function
            $searchBox.on('input', function () {
                let term = $searchBox.val();
                if (term.length < 3) {
                    $autocompleteDropdown.hide();
                    return;
                }

                $.getJSON('/Books/Autocomplete', { term: term }, function (data) {
                    if (data.length > 0) {
                        let dropdownItems = data.map(item => `<li class="dropdown-item">${item}</li>`);
                        $autocompleteDropdown.html(dropdownItems.join('')).show();
                    } else {
                        $autocompleteDropdown.hide();
                    }
                });
            });

            // Select an autocomplete suggestion
            $autocompleteDropdown.on('click', '.dropdown-item', function () {
                let selectedText = $(this).text();
                $searchBox.val(selectedText);
                $autocompleteDropdown.hide();
            });

            // Hide dropdown when clicking outside
            $(document).on('click', function (e) {
                if (!$(e.target).closest('#autocompleteDropdown, #searchBox').length) {
                    $autocompleteDropdown.hide();
                }
            });

            // Search button click handler
            $searchButton.on('click', function () {
                let query = $searchBox.val();
                if (query) {
                    window.location.href = `/Books/Search?query=${encodeURIComponent(query)}`;
                }
            });
        });
    </script>
}
